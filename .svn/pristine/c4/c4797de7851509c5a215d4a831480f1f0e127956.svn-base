package com.jbilling.framework.pageclasses;

import org.testng.Assert;

import com.jbilling.framework.globals.GlobalConsts;
import com.jbilling.framework.globals.GlobalController;
import com.jbilling.framework.globals.GlobalEnumerations.TextComparators;
import com.jbilling.framework.globals.Logger;
import com.jbilling.framework.interfaces.ElementField;
import com.jbilling.framework.interfaces.LocateBy;
import com.jbilling.framework.pageclasses.GlobalEnumsPage.AddProductField;
import com.jbilling.framework.utilities.textutilities.TextUtilities;
import com.jbilling.framework.utilities.xmlutils.TestData;

public class ProductsPage {
	// Initialize private logger object
	private static Logger logger = new Logger().getLogger(Thread.currentThread().getStackTrace()[1].getClassName());
	private final boolean standardAvailability = false;
	private boolean assetManage;

	@LocateBy(xpath = "//table[@id='categories']/tbody//strong[contains(text(),'New Test category')]")
	private ElementField LT_PRODUCTCATEGORY;

	@LocateBy(xpath = "//table[@id='categories']/tbody//strong[contains(text(),'Asset Category 1')]")
	private ElementField LT_ASSETCATEGORY;

	@LocateBy(xpath = "//span[text()='Add Product']")
	private ElementField LT_AddProduct;

	@LocateBy(xpath = "//select[@id='newDescriptionLanguage']")
	private ElementField DD_ADDDESCRIPTION;

	@LocateBy(xpath = "//a[@onclick='addNewProductDescription()']")
	private ElementField LT_ADDDESCRIPTION;

	@LocateBy(xpath = "//label[contains(text(),'English Description')]/../div/input[1]")
	private ElementField TB_ENGLISHDESCRIPTION;

	@LocateBy(xpath = "//input[@id='product.number']")
	private ElementField TB_PRODUCTCODE;

	@LocateBy(xpath = "//input[@id='product.standardAvailability']")
	private ElementField CB_STANDARDAVAILABILITY;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//select[@id='product.accountTypes']")
	private ElementField DD_ACCOUNTTYPE;

	@LocateBy(xpath = "//select[@class='model-type toolTipElement']")
	private ElementField DD_PRICINGMODEL;

	@LocateBy(xpath = "//input[@id='model.0.rateAsDecimal']")
	private ElementField TB_RATE;

	@LocateBy(xpath = "//select[@id='model.0.currencyId']")
	private ElementField DD_CURRENCY;

	@LocateBy(xpath = "//span[text()='Save Changes']")
	private ElementField BT_SAVECHANGES;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//span[text()='Cancel']")
	private ElementField BT_CANCEL;

	@LocateBy(xpath = "//table[@id='products']/tbody//strong[contains(text(),'Test Code Description')]")
	private ElementField LT_PRODUCT;

	@LocateBy(xpath = "//a[@class='submit edit']")
	private ElementField LT_EDITPRODUCT;

	@LocateBy(xpath = "//input[@id='product.standardPartnerPercentageAsDecimal']")
	private ElementField TB_AGENT;

	@LocateBy(xpath = "//input[@id='product.masterPartnerPercentageAsDecimal']")
	private ElementField TB_MASTER;

	@LocateBy(xpath = "//select[@id='company-select']")
	private ElementField DD_COMPANY;

	@LocateBy(xpath = "//ul[@class='top-nav']/li[1]")
	private ElementField TXT_COMPANY_NAME;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//div[@class='heading']//strong[contains(text(),'Add Product Category')]")
	private ElementField PageHeader_AddProductCategory;

	@LocateBy(xpath = "//span[text()='Add Category']")
	private ElementField LT_AddProductCategory;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//select[@id='orderLineTypeId']")
	private ElementField Dropdown_AddProductCategory;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//select[@id='parentItemTypeId']")
	private ElementField Dropdown_AddParentCategory;

	@LocateBy(xpath = "//input[@id='description']")
	private ElementField TB_ProductCategoryName;

	@LocateBy(xpath = "//a[@class='submit save']//span[contains(text(),'Save Changes')]")
	private ElementField LT_SaveProductCategory;

	@LocateBy(xpath = "//span[text()='Edit']")
	private ElementField LT_Edit;

	@LocateBy(xpath = "//input[@id='allowAssetManagement']")
	private ElementField CHK_AllowAssetManagement;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//span[text()='Asset Statuses']")
	private ElementField Header_AssetStatusSection;

	@LocateBy(xpath = "//input[@id='lastStatusName']")
	private ElementField TB_AssetStatusName;

	@LocateBy(xpath = "//input[@id='lastStatusAvailable']")
	private ElementField CHK_Available;

	@LocateBy(xpath = "//input[@id='lastStatusDefault']")
	private ElementField CHK_Default;

	@LocateBy(xpath = "//input[@id='lastStatusOrderSaved']")
	private ElementField CHK_OrderSave;

	@LocateBy(xpath = "//tr[@id='lastStatus']/td[5]/a/img")
	private ElementField BT_HiddenAssetStatus;

	@LocateBy(xpath = "//div[@id='assetMetaFields']/div[2]/div[1]/span[1]/a/img")
	private ElementField BT_MetaField;

	@LocateBy(xpath = "//input[@id='metaField2.name']")
	private ElementField TB_MetaFieldName;

	@LocateBy(xpath = "//table[@id='categories']/tbody/tr[1]/td/a/strong")
	private ElementField LT_CreatedProductCategory;

	@LocateBy(xpath = "//ul[@class='top-nav']/li[1]")
	private ElementField COMPANY;

	@LocateBy(xpath = "//select[@id = 'parentItemTypeId']")
	private ElementField DD_PARENT;

	@LocateBy(xpath = "//div[@class='menu-items']/ul/li-->>{TXT}Plug-ins{TXT}")
	private ElementField LT_PLUGINS;

	@LocateBy(xpath = "//strong[contains(text(),'Generic internal events listener')]")
	private ElementField LT_PLUGINGENERIC;

	@LocateBy(xpath = "//span[text()='Add New']")
	private ElementField LT_ADDNEW;

	@LocateBy(xpath = "//select[@id='typeId']")
	private ElementField DD_PLUGINTYPE;

	@LocateBy(xpath = "//input[@id='processingOrder']")
	private ElementField TB_ORDER;

	@LocateBy(xpath = "//span[text()='Save Plug-in']")
	private ElementField LT_SAVEPLUGINS;

	@LocateBy(xpath = "//div[@id='assetManagementEnabledDiv']/div/input[2]")
	private ElementField CB_ALLOWASSETMGMT;

	@LocateBy(xpath = "//span[text()='Add Asset']")
	private ElementField LT_ADDASSET;

	@LocateBy(xpath = "//span[text()='Add New']")
	private ElementField LT_ADDNEWASSET;

	@LocateBy(xpath = "//input[@id='identifier']")
	private ElementField TB_IDENTIFIER;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//span[text()='Save Changes']")
	private ElementField LT_SAVECHANGES;

	@LocateBy(xpath = "//strong[contains(text(),'Agent Commission Calculation Process.')]")
	private ElementField LT_PLUGINAGENT;

	@LocateBy(xpath = "//input[@id='description']")
	private ElementField TB_NAME;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//span[text()='Save Changes']")
	private ElementField LT_SAVE_CHANGES;

	@LocateBy(xpath = "//label[text()='Included Quantity']/../div/input[2]")
	private ElementField TB_INCLUDED_QUANTITY;

	@LocateBy(xpath = "//span[text()='Dependencies']")
	private ElementField LT_DEPENDENCIES;

	@LocateBy(xpath = "//select[@id='product.dependencyItemTypes']")
	private ElementField DD_PRODUCT_CATEGORY;

	@LocateBy(xpath = "//select[@id='product.dependencyItems']")
	private ElementField DD_PRODUCT;

	@LocateBy(xpath = "//img[@alt='Add']")
	private ElementField LT_ADD_PLUS_BUTTON;

	@LocateBy(xpath = "//table[@id='users']")
	private ElementField USERS_TABLE_CELL;

	@LocateBy(xpath = "//table[@id='categories']/tbody/tr/td/a/strong")
	private ElementField TAB_PRODUCT_CATEGORY;

	@LocateBy(xpath = "//table[@id='products']/tbody/tr/td/a/strong")
	private ElementField TAB_PRODUCT_NAME;

	@LocateBy(xpath = "")
	private ElementField TAB_PRODUCTS_ONE;

	@LocateBy(xpath = "")
	private ElementField TAB_PRODUCTS_TWO;

	@LocateBy(xpath = "//span[text()='Delete']")
	private ElementField LT_DELETE;

	@LocateBy(xpath = "//button/span[text()='Yes']")
	private ElementField LT_CONFIRM_YES;

	@LocateBy(xpath = "//div[@class='btn-box']/a/span")
	private ElementField LT_ADD_CATEGORY;

	@LocateBy(xpath = "")
	private ElementField LT_FIRST_CATEGORY;

	@LocateBy(xpath = "")
	private ElementField BT_SHOW_ASSETS;

	@LocateBy(xpath = "")
	private ElementField TAB_ASSET;

	@LocateBy(xpath = "")
	private ElementField TXT_ASSET_NAME;

	@LocateBy(xpath = "//div[@id='breadcrumbs']")
	private ElementField BREADCRUMBS;

	@LocateBy(id = "product.dependencyMin")
	private ElementField MINIMUM;

	@LocateBy(xpath = "//table[@id='categories']/tbody//td/a/strong")
	private ElementField PRODUCT_CATEGORY_LIST;

	@LocateBy(xpath = "//table[@id='products']/tbody//td/a/strong")
	private ElementField PRODUCT_NAME_LIST;

	@LocateBy(xpath = "//div[@class='form-columns']/div/div/span")
	private ElementField PRODUCT_ID;

	@LocateBy(xpath = "//div[@class = 'buttons']//span[text()='Save Changes']")
	private ElementField BT_EDIT_SAVECHANGES;

	@LocateBy(xpath = "//span[text()='Dependencies']/parent::div[@class = 'box-cards-title']/following-sibling::div[@class = 'box-card-hold']/div/table[@class = 'dataTable']")
	private ElementField ADDED_DEPENDENCY_LIST;
	@LocateBy(xpath = "//input[contains(@data-customtooltip,'The cap on the maximum amount on the total')]")
	private ElementField Maximum;

	@LocateBy(xpath = "//input[contains(@data-customtooltip,'If mediation is used this field is required.')]")
	private ElementField Date;

	@LocateBy(xpath = "//input[@data-customtooltip='This represents midnight (the beginning of a day)']")
	private ElementField TimeSet;

	@LocateBy(xpath = "//input[@id='model.0.attribute.1.value']")
	private ElementField Range;

	@LocateBy(xpath = "//input[contains(@data-customtooltip,'This represents the range starting value')]")
	private ElementField From;

	@LocateBy(xpath = "//input[@data-customtooltip='This is the rate for the range starting from this value(inclusive)']")
	private ElementField Rate1;

	@LocateBy(xpath = "//a[@onclick ='addModelAttribute(this, 0, 2)']")
	private ElementField NewAttribute;

	@LocateBy(xpath = " //input[@name='model.0.attribute.3.name']")
	private ElementField From1;

	@LocateBy(xpath = "//input[contains(@name,'model.0.attribute.3.value')]")
	private ElementField Rate2;

	@LocateBy(xpath = "//a[@onclick ='addModelAttribute(this, 0, 3)']")
	private ElementField NewAttribute1;

	@LocateBy(xpath = " //input[@name='model.0.attribute.4.name']")
	private ElementField From2;

	@LocateBy(xpath = "//input[contains(@name,'model.0.attribute.4.value')]")
	private ElementField Rate3;

	@LocateBy(xpath = "//input[contains(@data-customtooltip,'Number of pulled products to be purchased, to be able to get this product as a bonus')]")
	private ElementField Multiplier;

	@LocateBy(xpath = "//select[contains(@name,'model.0.attribute.1.value')]")
	private ElementField SelectCategory;

	@LocateBy(xpath = "//input[contains(@data-customtooltip,'The calculation to determine the percentage is Selection Category/Category Percent x 100')]")
	private ElementField CategoryPercantage;

	@LocateBy(xpath = "//input[@data-customtooltip='Pair range between percentage calculated and the ID the product added, starting from 0 percent']")
	private ElementField ZeroField;

	@LocateBy(xpath = "//input[contains(@data-customtooltip,'Pair range between quantity of products in selected category and the ID the product added, starting from 1')]")
	private ElementField OneField;

	@LocateBy(xpath = "//input[@name='model.0.attribute.1.name']")
	private ElementField ProductID;

	@LocateBy(xpath = "//input[@name='model.0.attribute.1.value']")
	private ElementField Quantity;

	@LocateBy(xpath = "//span[contains(.,'Add Chain')]")
	private ElementField BT_AddChain;

	@LocateBy(xpath = "//input[contains(@data-customtooltip,'The rate of the product after the included quantity')]")
	private ElementField TB_GraduateRate;

	@LocateBy(xpath = "//input[contains(@data-customtooltip,'Number of included products for free')]")
	private ElementField TB_GraduateIncludedQuantity;

	/**
	 * This method will select Successful Product Category
	 */
	ProductsPage selectSuccessfulProductCategory() throws Exception {
		GlobalController.brw.clickLinkText(this.TAB_PRODUCT_CATEGORY);
		return GlobalController.brw.initElements(ProductsPage.class);
	}

	/**
	 * This method will select Successful Product Category
	 */
	ProductsPage selectSuccessfulProduct() throws Exception {
		GlobalController.brw.clickLinkText(this.TAB_PRODUCT_NAME);
		return GlobalController.brw.initElements(ProductsPage.class);
	}

	/**
	 * This method will select Product
	 *
	 * @throws Exception
	 */
	ProductsPage clickProductOne() throws Exception {
		GlobalController.brw.clickLinkText(this.TAB_PRODUCTS_ONE);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will select Product
	 *
	 * @throws Exception
	 */
	ProductsPage clickProductTwo() throws Exception {
		ProductsPage.logger.enterMethod();

		GlobalController.brw.clickLinkText(this.TAB_PRODUCTS_TWO);
		ProductsPage.logger.exitMethod();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click on Delete Button
	 *
	 * @throws Exception
	 */
	ProductsPage clickDelete() throws Exception {
		ProductsPage.logger.enterMethod();

		GlobalController.brw.clickLinkText(this.LT_DELETE);
		ProductsPage.logger.exitMethod();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click on confirm Yes
	 *
	 * @throws Exception
	 */
	ProductsPage clickConfirmYes() throws Exception {
		ProductsPage.logger.enterMethod();

		GlobalController.brw.clickLinkText(this.LT_CONFIRM_YES);
		ProductsPage.logger.exitMethod();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click on Add Category Button
	 *
	 * @throws Exception
	 */
	ProductsPage clickAddCategory() throws Exception {
		ProductsPage.logger.enterMethod();

		GlobalController.brw.clickLinkText(this.LT_ADD_CATEGORY);
		ProductsPage.logger.exitMethod();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage selectCategory() throws Exception {
		ProductsPage.logger.enterMethod();

		GlobalController.brw.clickLinkText(this.LT_PRODUCTCATEGORY);
		ProductsPage.logger.exitMethod();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage selectRecentCategory() throws Exception {

		ProductsPage.logger.enterMethod();
		String Category = GlobalController.brw.getText(this.LT_FIRST_CATEGORY);

		GlobalController.brw.selectTableRowItem(this.LT_PRODUCTCATEGORY, Category);
		ProductsPage.logger.exitMethod();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage clickShowAssets() throws Exception {
		ProductsPage.logger.enterMethod();

		GlobalController.brw.clickLinkText(this.BT_SHOW_ASSETS);
		ProductsPage.logger.exitMethod();

		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage verifyAssetPresent(String assetName) throws Exception {
		ProductsPage.logger.enterMethod();

		GlobalController.brw.clickTableCellWithText(this.TAB_ASSET, assetName);
		String asset = GlobalController.brw.getText(this.TXT_ASSET_NAME);
		if (TextUtilities.contains(asset, assetName)) {
			Assert.assertTrue(true);
		} else {
			Assert.assertTrue(false);
		}
		ProductsPage.logger.exitMethod();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * Add Product Form
	 *
	 * @param paptcd
	 * @throws Exception
	 */

	ProductsPage addProductCategory() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_PRODUCTCATEGORY);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage addAssetCategory() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_ASSETCATEGORY);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage checkStandardAvailability(boolean standardAvailability) throws Exception {
		if (standardAvailability) {
			GlobalController.brw.check(this.CB_STANDARDAVAILABILITY);
		} else {
			GlobalController.brw.uncheck(this.CB_STANDARDAVAILABILITY);
		}
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	// Disabled field
	// GlobalController.brw.selectDropDown(ElementFieldsReader.GetElement(this.loadFields(),
	// "DD_ACCOUNTTYPE"),
	// paptcd.);
	ProductsPage selectPricingModel(String pricingModel) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_PRICINGMODEL, pricingModel);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage clickProductToEdit() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_PRODUCT);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage ClickEditProduct() throws Exception {
		GlobalController.brw.clickHiddenHref(this.LT_EDITPRODUCT);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage setAgentCommission(String agent) throws Exception {
		GlobalController.brw.setText(this.TB_AGENT, agent);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage setMasterCommission(String master) throws Exception {
		GlobalController.brw.setText(this.TB_MASTER, master);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage verifySavedProduct() throws Exception {
		MessagesPage.isIntermediateSuccessMessageAppeared();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Category Name
	 *
	 * @param productCategoryName
	 * @throws Exception
	 */
	ProductsPage setCategoryName(String productCategoryName) throws Exception {
		GlobalController.brw.setText(this.TB_ProductCategoryName, productCategoryName);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will select recent Category
	 *
	 * @throws Exception
	 */
	ProductsPage clickRecentCreatedcategory() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_CreatedProductCategory);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click on Edit button
	 *
	 * @throws Exception
	 */
	ProductsPage clickEdit() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_Edit);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click on Save Changes button
	 *
	 * @throws Exception
	 */
	ProductsPage ClickSaveChanges() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_SaveProductCategory);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will select current company
	 *
	 *
	 * @throws Exception
	 */
	ProductsPage selectCurrentCompany() throws Exception {
		String company = GlobalController.brw.getText(this.COMPANY);
		GlobalController.brw.selectDropDown(this.DD_COMPANY, company);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will select parent category
	 *
	 *
	 * @throws Exception
	 */
	ProductsPage selectParentCategory(String parent) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_PARENT, parent);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage selectPluginsInConfiguration() throws Exception {
		GlobalController.brw.selectListItem(this.LT_PLUGINS, GlobalConsts.USE_EXTENDED_TEXT_TO_XPATH);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage clickPluginGeneric() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_PLUGINGENERIC);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	public ProductsPage clickAddNew() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_ADDNEW);
		return GlobalController.brw.initElements(ProductsPage.class);
	}

	ProductsPage selectPluginTypeDropdown(String pluginType) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_PLUGINTYPE, pluginType);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage setOrder(String order) throws Exception {
		GlobalController.brw.setText(this.TB_ORDER, order);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage clickSaveButton() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_SAVEPLUGINS);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage SelectProductCategory() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_PRODUCTCATEGORY);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage clickAddProduct() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_AddProduct);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage setEnglishDescription(String englishDescription) throws Exception {
		GlobalController.brw.setText(this.TB_ENGLISHDESCRIPTION, englishDescription);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage checkAssetManagement(boolean assetManage) throws Exception {
		if (assetManage) {
			GlobalController.brw.check(this.CB_ALLOWASSETMGMT);
		} else {
			GlobalController.brw.uncheck(this.CB_ALLOWASSETMGMT);
		}
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage selectDropdownCurrency(String currency) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_CURRENCY, currency);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	public ProductsPage addAsset() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_ADDASSET);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage assetDetails(String identifier) throws Exception {
		GlobalController.brw.setText(this.TB_IDENTIFIER, identifier);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage addNewAsset() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_ADDNEWASSET);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage clickPluginAgentCommision() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_PLUGINAGENT);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage verifySavedPlugin() throws Exception {
		MessagesPage.isIntermediateSuccessMessageAppeared();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage clickAddProductCategory() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_AddProductCategory);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage setProductCategoryName(String assetCategory) throws Exception {
		GlobalController.brw.setText(this.TB_ProductCategoryName, assetCategory);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage checkAllowAssetManagement() throws Exception {
		GlobalController.brw.check(this.CHK_AllowAssetManagement);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage setAssetStatusName(String assetStatusName) throws Exception {
		GlobalController.brw.setText(this.TB_AssetStatusName, assetStatusName);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage checkAvailable() throws Exception {
		GlobalController.brw.check(this.CHK_Available);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage checkDefault() throws Exception {
		GlobalController.brw.check(this.CHK_Default);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage clickHiddenStatus() throws Exception {
		GlobalController.brw.click(this.BT_HiddenAssetStatus);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage checkOrderSave() throws Exception {
		GlobalController.brw.check(this.CHK_OrderSave);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage clickMetaField() throws Exception {
		GlobalController.brw.isElementPresent(this.BT_MetaField);
		GlobalController.brw.click(this.BT_MetaField);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage setMetafieldName(String assetStatusName) throws Exception {
		GlobalController.brw.setText(this.TB_MetaFieldName, assetStatusName);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	ProductsPage clickSaveCategory() throws Exception {
		GlobalController.brw.click(this.LT_SaveProductCategory);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Name
	 */
	ProductsPage setName(String name) throws Exception {
		GlobalController.brw.setText(this.TB_NAME, name);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will Add description
	 *
	 * @param description
	 * @throws Exception
	 */
	ProductsPage selectAddDescription(String description) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_ADDDESCRIPTION, description);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click image + button
	 *
	 * @throws Exception
	 */
	ProductsPage clickAddDescription() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_ADDDESCRIPTION);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Rate in Graduate
	 *
	 * @param Graduate
	 *            Rate
	 * @throws Exception
	 */
	ProductsPage setGraduateRate(String GraduateRate) throws Exception {
		GlobalController.brw.setText(this.TB_GraduateRate, GraduateRate);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set description
	 *
	 * @param englishDescription
	 * @throws Exception
	 */
	ProductsPage setDescription(String englishDescription) throws Exception {
		GlobalController.brw.setText(this.TB_ENGLISHDESCRIPTION, englishDescription);
		return GlobalController.brw.initElements(ProductsPage.class);

	}
	/**
	 * This method will set Included quantity in Graduate
	 *
	 * @param Graduate
	 *            quantity
	 * @throws Exception
	 */
	ProductsPage setGraduateIncludedQuantity(String GraduateQuantity) throws Exception {
		GlobalController.brw.setText(this.TB_GraduateIncludedQuantity, GraduateQuantity);
		return GlobalController.brw.initElements(ProductsPage.class);

	}
	/**
	 * This method will set Product Code
	 *
	 * @param productCode
	 * @throws Exception
	 */
	ProductsPage setProductCode(String productCode) throws Exception {
		GlobalController.brw.setText(this.TB_PRODUCTCODE, productCode);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will select company from company dropdown
	 *
	 * @param company
	 * @throws Exception
	 */
	ProductsPage selectCompany() throws Exception {
		String text = GlobalController.brw.getText(this.TXT_COMPANY_NAME);

		GlobalController.brw.selectDropDown(this.DD_COMPANY, text);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set IncludedQuantity
	 *
	 * @param rate
	 * @throws Exception
	 */
	ProductsPage setIncludedQuantity(String includedQuantity) throws Exception {
		GlobalController.brw.setText(this.TB_INCLUDED_QUANTITY, includedQuantity);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will select Currency
	 *
	 * @param currency
	 * @throws Exception
	 */
	ProductsPage selectCurrency(String currency) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_CURRENCY, currency);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will select product category
	 *
	 * @param currency
	 * @throws Exception
	 */
	ProductsPage selectProductCategory(String Category) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_PRODUCT_CATEGORY, Category);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Maximum
	 *
	 * @param Maximum
	 * @throws Exception
	 */
	ProductsPage setMaximum(String maximum) throws Exception {
		GlobalController.brw.setText(this.Maximum, maximum);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Maximum
	 *
	 * @param Maximum
	 * @throws Exception
	 */
	ProductsPage selectCategoryID(String CategoryID) throws Exception {
		GlobalController.brw.selectDropDown(this.SelectCategory, CategoryID);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Date
	 *
	 * @param Date
	 * @throws Exception
	 */
	ProductsPage setDate(String date) throws Exception {
		GlobalController.brw.setText(this.Date, date);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set TimeSet
	 *
	 * @param TimeSet
	 * @throws Exception
	 */
	ProductsPage setTimeField(String TimeValue) throws Exception {
		GlobalController.brw.setText(this.TimeSet, TimeValue);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Range
	 *
	 * @param Range
	 * @throws Exception
	 */
	ProductsPage setRange(String Range) throws Exception {
		GlobalController.brw.setText(this.Range, Range);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set From
	 *
	 * @param From
	 * @throws Exception
	 */
	ProductsPage setFrom(String From) throws Exception {
		GlobalController.brw.setText(this.From, From);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Rate1
	 *
	 * @param Rate1
	 * @throws Exception
	 */
	ProductsPage setToRate(String Rate1) throws Exception {
		GlobalController.brw.setText(this.Rate1, Rate1);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set From1
	 *
	 * @param From1
	 * @throws Exception
	 */
	ProductsPage setFrom1(String From1) throws Exception {
		GlobalController.brw.setText(this.From1, From1);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Rate1
	 *
	 * @param Rate1
	 * @throws Exception
	 */
	ProductsPage setToRate2(String Rate2) throws Exception {
		GlobalController.brw.setText(this.Rate2, Rate2);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set From1
	 *
	 * @param From1
	 * @throws Exception
	 */
	ProductsPage setFrom2(String From2) throws Exception {
		GlobalController.brw.setText(this.From2, From2);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Rate1
	 *
	 * @param Rate1
	 * @throws Exception
	 */
	ProductsPage setToRate3(String Rate3) throws Exception {
		GlobalController.brw.setText(this.Rate3, Rate3);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Multiplier
	 *
	 * @param Multiplier
	 * @throws Exception
	 */
	ProductsPage setMultiplier(String Multiplier) throws Exception {
		GlobalController.brw.setText(this.Multiplier, Multiplier);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click image + button
	 *
	 * @throws Exception
	 */
	ProductsPage clickAddNewAttribute() throws Exception {
		GlobalController.brw.clickLinkText(this.NewAttribute);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click image + button
	 *
	 * @throws Exception
	 */
	ProductsPage clickAddNewAttribute1() throws Exception {
		GlobalController.brw.clickLinkText(this.NewAttribute1);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Rate
	 *
	 * @param rate
	 * @throws Exception
	 */
	ProductsPage setRate(String rate) throws Exception {
		GlobalController.brw.waitForWebElementPresent();
		GlobalController.brw.setText(this.TB_RATE, rate);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set ProductID
	 *
	 * @param ProductID
	 * @throws Exception
	 */
	ProductsPage setProductID(String ProductID) throws Exception {
		GlobalController.brw.waitForWebElementPresent();
		GlobalController.brw.setText(this.ProductID, ProductID);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set Quantity
	 *
	 * @param Quantity
	 * @throws Exception
	 */
	ProductsPage setQuantity(String Quantity) throws Exception {
		GlobalController.brw.waitForWebElementPresent();
		GlobalController.brw.setText(this.Quantity, Quantity);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click Add Chain button
	 *
	 * @throws Exception
	 */
	ProductsPage clickAddChain() throws Exception {
		GlobalController.brw.clickLinkText(this.BT_AddChain);
		return GlobalController.brw.initElements(ProductsPage.class);
	}

	/**
	 * This method will set Category Percentage
	 *
	 * @param Category
	 *            Percentage
	 *
	 * @throws Exception
	 */
	ProductsPage setPercentageCategory(String Percentage) throws Exception {
		GlobalController.brw.waitForWebElementPresent();
		GlobalController.brw.setText(this.CategoryPercantage, Percentage);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set OField
	 *
	 * @param rate
	 * @throws Exception
	 */
	ProductsPage setZero(String Zero) throws Exception {
		GlobalController.brw.waitForWebElementPresent();
		GlobalController.brw.setText(this.ZeroField, Zero);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will set OField
	 *
	 * @param rate
	 * @throws Exception
	 */
	ProductsPage setOne(String One) throws Exception {
		GlobalController.brw.waitForWebElementPresent();
		GlobalController.brw.setText(this.OneField, One);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will select product
	 *
	 * @param currency
	 * @throws Exception
	 */
	ProductsPage selectProduct(String product) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_PRODUCT, product);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click + button button
	 *
	 * @throws Exception
	 */
	ProductsPage clickImagePlusButton() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_ADD_PLUS_BUTTON);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click Dependencies
	 *
	 * @throws Exception
	 */
	ProductsPage clickDependencies() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_DEPENDENCIES);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * This method will click Save Changes button
	 *
	 * @throws Exception
	 */
	ProductsPage clickSaveChanges() throws Exception {
		GlobalController.brw.clickLinkText(this.BT_SAVECHANGES);
		return GlobalController.brw.initElements(ProductsPage.class);
	}

	/**
	 * This will enter minimum value in dependencies
	 *
	 * @param master
	 * @return
	 * @throws Exception
	 */
	ProductsPage setMimimumValue(String minimum) throws Exception {
		GlobalController.brw.setText(this.MINIMUM, minimum);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	/**
	 * Click on specified Category
	 *
	 * @throws Exception
	 */
	public ConfigurationPage clickSpecifiedCategoryInTheTable(String categoryName) throws Exception {
		GlobalController.brw.selectListItem(this.PRODUCT_CATEGORY_LIST, categoryName);
		return GlobalController.brw.initElements(ConfigurationPage.class);
	}

	/**
	 * Click on specified Product
	 *
	 * @throws Exception
	 */
	public ConfigurationPage clickSpecifiedProductInTheTable(String product) throws Exception {
		GlobalController.brw.selectListItem(this.PRODUCT_NAME_LIST, product);
		return GlobalController.brw.initElements(ConfigurationPage.class);
	}

	/**
	 * This method will select company from company dropdown
	 *
	 * @param company
	 * @throws Exception
	 */
	public String getProductID() throws Exception {
		String text = GlobalController.brw.getText(this.PRODUCT_ID);
		return text;

	}

	/**
	 * Check if the Product is present in the Dropdown
	 *
	 * @param productName
	 * @return
	 * @throws Exception
	 */
	public boolean isProductPresent(String productName) throws Exception {
		return GlobalController.brw.isValuePresentInDropDown(this.DD_PRODUCT, productName);
	}

	/**
	 * This method will click Save Changes button After Editing Any Product
	 *
	 * @throws Exception
	 */
	ProductsPage clickEditSaveChanges() throws Exception {
		GlobalController.brw.clickLinkText(this.BT_EDIT_SAVECHANGES);
		return GlobalController.brw.initElements(ProductsPage.class);
	}

	public String addProduct(AddProductField addProductField, String testDataSetName, String category) throws Exception {
		String description = TestData.read("PageProducts.xml", testDataSetName, "description", category);
		String englishDescription = TestData.read("PageProducts.xml", testDataSetName, "englishDescription", category);
		String productCode = TestData.read("PageProducts.xml", testDataSetName, "productCode", category);
		String pricingModel = TestData.read("PageProducts.xml", testDataSetName, "pricingModel", category);
		String rate = TestData.read("PageProducts.xml", testDataSetName, "rate", category);
		String currency = TestData.read("PageProducts.xml", testDataSetName, "currency", category);
		String includedQuantity = TestData.read("PageProducts.xml", testDataSetName, "includedQuantity", category);
		String Maximum = TestData.read("PageProducts.xml", testDataSetName, "maximum", category);
		String Date = TestData.read("PageProducts.xml", testDataSetName, "Date", category);
		String TimeFormat = TestData.read("PageProducts.xml", testDataSetName, "OO:OO", category);
		String Range = TestData.read("PageProducts.xml", testDataSetName, "Range", category);
		String From = TestData.read("PageProducts.xml", testDataSetName, "From", category);
		String Rate1 = TestData.read("PageProducts.xml", testDataSetName, "Rate", category);
		String From1 = TestData.read("PageProducts.xml", testDataSetName, "From1", category);
		String Rate2 = TestData.read("PageProducts.xml", testDataSetName, "Rate2", category);
		String From2 = TestData.read("PageProducts.xml", testDataSetName, "From2", category);
		String Rate3 = TestData.read("PageProducts.xml", testDataSetName, "Rate3", category);
		String Multiplier = TestData.read("PageProducts.xml", testDataSetName, "Multiplier", category);
		String CategoryID = TestData.read("PageProducts.xml", testDataSetName, "categoryID", category);
		String Percentage = TestData.read("PageProducts.xml", testDataSetName, "CategoryPercentage", category);
		String Zero = TestData.read("PageProducts.xml", testDataSetName, "Zero", category);
		String One = TestData.read("PageProducts.xml", testDataSetName, "One", category);
		String ProductID = TestData.read("PageProducts.xml", testDataSetName, "ProductID", category);
		String Quantity = TestData.read("PageProducts.xml", testDataSetName, "Quantity", category);
		String GraduateRate = TestData.read("PageProducts.xml", testDataSetName, "GraduateRate", category);
		String GraduateQuantity = TestData.read("PageProducts.xml", testDataSetName, "GraduateQuantity", category);

		boolean standardAvailability = TextUtilities.compareValue(
				TestData.read("PageProducts.xml", testDataSetName, "standardAvailability", category), "true", true, TextComparators.equals);
		boolean assetManage = TextUtilities.compareValue(TestData.read("PageProducts.xml", testDataSetName, "assetManage", category),
				"true", true, TextComparators.equals);

		switch (addProductField) {
		case FLAT:
			this.addProductCategory();
			this.clickAddProduct();
			this.selectAddDescription(description);
			this.clickAddDescription();

			this.setDescription(englishDescription);
			this.setProductCode(productCode);
			// this.checkAssetManagement(assetManage);
			this.checkStandardAvailability(standardAvailability);
			this.selectPricingModel(pricingModel);
			// this.setIncludedQuantity(includedQuantity);
			this.setRate(rate);
			this.selectCurrency(currency);
			break;
		case LINEPERCENTAGE:
			this.addProductCategory();
			this.clickAddProduct();
			this.selectAddDescription(description);
			this.clickAddDescription();

			this.setDescription(englishDescription);
			this.setProductCode(productCode);
			// this.checkAssetManagement(assetManage);
			this.checkStandardAvailability(standardAvailability);
			this.selectPricingModel(pricingModel);
			// this.setIncludedQuantity(includedQuantity);
			this.setRate(rate);
			break;

		case ASSETMANAGEMENT: // "addProductThree", "ap"
			this.addAssetCategory();
			this.clickAddProduct();
			this.selectAddDescription(description);
			this.clickAddDescription();

			this.setDescription(englishDescription);
			this.setProductCode(productCode);
			this.checkAssetManagement(assetManage);
			this.checkStandardAvailability(standardAvailability);
			this.selectPricingModel(pricingModel);
			// this.setIncludedQuantity(includedQuantity);
			this.setRate(rate);
			this.selectCurrency(currency);
			break;
		case DESCRIPTION:
			// this.addProductCategory();
			this.clickAddProduct();
			this.setProductCode(productCode);
			this.clickAddDescription();
			this.setDescription(englishDescription);
			break;
		case FLATPRICE:
			// this.addProductCategory();
			// this.selectRecentCategory();
			this.clickAddProduct();
			this.setProductCode(productCode);
			this.clickAddDescription();
			this.setDescription(englishDescription);
			this.selectPricingModel(pricingModel);
			this.setRate(rate);
			break;
		case GRADUATEDPRICE:
			// this.addProductCategory();
			// this.selectProductCategory(category);
			this.clickAddProduct();
			this.setProductCode(productCode);
			this.clickAddDescription();
			this.setDescription(englishDescription);
			this.selectPricingModel(pricingModel);
			this.setRate(rate);
			this.setIncludedQuantity(includedQuantity);
			break;

		case GRADUATECAPPRICE:
			this.clickAddProduct();
			this.setProductCode(productCode);
			this.clickAddDescription();
			this.setDescription(englishDescription);
			this.selectPricingModel(pricingModel);
			this.setRate(rate);
			this.setIncludedQuantity(includedQuantity);
			this.setMaximum(Maximum);
			break;

		case TIMEOFDAY:
			this.clickAddProduct();
			this.setProductCode(productCode);
			this.clickAddDescription();
			this.setDescription(englishDescription);
			this.selectPricingModel(pricingModel);
			this.setDate(Date);
			this.setTimeField(TimeFormat);
			break;

		case TIERED:
			this.clickAddProduct();
			this.setProductCode(productCode);
			this.clickAddDescription();
			this.setDescription(englishDescription);
			this.selectPricingModel(pricingModel);
			this.setRange(Range);
			this.setFrom(From);
			this.setToRate(Rate1);
			this.clickAddNewAttribute();
			this.setFrom1(From1);
			this.setToRate2(Rate2);
			break;

		case VOLUME:
			this.clickAddProduct();
			this.setProductCode(productCode);
			this.clickAddDescription();
			this.setDescription(englishDescription);
			this.selectPricingModel(pricingModel);
			this.setRange(Range);
			this.setFrom(From);
			this.setToRate(Rate1);
			this.clickAddNewAttribute();
			this.setFrom1(From1);
			this.setToRate2(Rate2);
			this.clickAddNewAttribute1();
			this.setFrom2(From2);
			this.setToRate3(Rate3);
			break;

		case POOLED:
			this.clickAddProduct();
			this.setProductCode(productCode);
			this.clickAddDescription();
			this.setDescription(englishDescription);
			this.selectPricingModel(pricingModel);
			this.setRate(rate);
			this.setMultiplier(Multiplier);
			break;
		case ITEMPAGESELECTOR:
			this.clickAddProduct();
			this.setProductCode(productCode);
			this.clickAddDescription();
			this.setDescription(englishDescription);
			this.selectPricingModel(pricingModel);
			this.setRate(rate);
			// this.selectCategoryID(CategoryID);
			this.setPercentageCategory(Percentage);
			this.setZero(Zero);
			break;

		case ITEMSELECTOR:
			this.clickAddProduct();
			this.setProductCode(productCode);
			this.clickAddDescription();
			this.setDescription(englishDescription);
			this.selectPricingModel(pricingModel);
			this.setOne(One);
			break;

		case QUANTITYADON:
			this.clickAddProduct();
			this.setProductCode(productCode);
			this.clickAddDescription();
			this.setDescription(englishDescription);
			this.selectPricingModel(pricingModel);
			this.setProductID(ProductID);
			this.setQuantity(Quantity);
			this.clickAddChain();
			this.setGraduateRate(GraduateRate);
			this.setGraduateIncludedQuantity(GraduateQuantity);
			break;
		case GRADUATED:
			this.clickRecentCreatedcategory();
			System.out.println("22222222222");
			this.clickAddProduct();
			System.out.println("333333333333333");
			this.selectAddDescription(description);
			System.out.println("4444444444444");
			this.clickAddDescription();
			System.out.println("555555555555555");
			this.setDescription(englishDescription);
			this.setProductCode(productCode);
			this.selectPricingModel(pricingModel);
			this.setIncludedQuantity(includedQuantity);
			this.setRate(rate);
			break;
		default:
			throw new Exception("Invalid Step Provided. Not defined in enumeration");
		}
		this.clickSaveChanges();
		return englishDescription;

	}

	public ProductsPage editProduct(String testDataSetName, String category) throws Exception {
		String englishDescription = TestData.read("PageProducts.xml", testDataSetName, "englishDescription", category);
		String productCode = TestData.read("PageProducts.xml", testDataSetName, "productCode", category);
		String rate = TestData.read("PageProducts.xml", testDataSetName, "rate", category);

		this.clickProductToEdit();
		this.ClickEditProduct();

		this.setDescription(englishDescription);
		this.setProductCode(productCode);

		this.setRate(rate);
		this.clickSaveChanges();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	public String addCategory(String testDataSetName, String category) throws Exception {
		String name = TestData.read("PageProducts.xml", testDataSetName, "name", category);
		this.clickAddCategory();
		this.setCategoryName(name);
		this.selectCurrentCompany();
		this.clickSaveCategory();
		return name;

	}

	public ProductsPage addPlugin(String testDataSetName, String category) throws Exception {
		String pluginType = TestData.read("PageProducts.xml", testDataSetName, "pluginType", category);
		String order4 = TestData.read("PageProducts.xml", testDataSetName, "order4", category);

		this.selectPluginsInConfiguration();
		this.clickPluginGeneric();
		this.clickAddNew();
		this.selectPluginTypeDropdown(pluginType);

		this.setOrder(order4);
		this.clickSaveButton();
		return GlobalController.brw.initElements(ProductsPage.class);
	}

	public String addAsset(String testDataSetName, String category) throws Exception {
		String identifier = TestData.read("PageProducts.xml", testDataSetName, "identifier", category);
		String taxID = TestData.read("PageProducts.xml", testDataSetName, "taxID", category);
		this.assetDetails(identifier);
		this.clickSaveChanges();
		return identifier;

	}

	public String addProductCategoryWithAssetMgmt(String testDataSetName, String category) throws Exception {
		String assetCategory = TestData.read("PageProducts.xml", testDataSetName, "assetCategory", category);
		String metaFieldName = TestData.read("PageProducts.xml", testDataSetName, "metaFieldName", category);
		String assetStatusName = TestData.read("PageProducts.xml", testDataSetName, "assetStatusName", category);
		String assetStatusName2 = TestData.read("PageProducts.xml", testDataSetName, "assetStatusName2", category);

		this.clickAddProductCategory();
		this.setProductCategoryName(assetCategory);
		this.selectCurrentCompany();
		this.checkAllowAssetManagement();
		this.setAssetStatusName(assetStatusName);
		this.checkAvailable();
		this.checkDefault();
		this.clickHiddenStatus();
		this.setAssetStatusName(assetStatusName2);
		this.checkOrderSave();
		this.clickMetaField();
		this.setMetafieldName(metaFieldName);
		this.clickSaveCategory();
		return assetCategory;

	}

	public String Createanotherproduct(AddProductField addProductField, String testDataSetName, String category) throws Exception {
		String description = TestData.read("PageProducts.xml", testDataSetName, "description", category);
		String englishDescription = TestData.read("PageProducts.xml", testDataSetName, "englishDescription", category);
		String productCode = TestData.read("PageProducts.xml", testDataSetName, "productCode", category);
		String pricingModel = TestData.read("PageProducts.xml", testDataSetName, "pricingModel", category);
		String rate = TestData.read("PageProducts.xml", testDataSetName, "rate", category);
		String currency = TestData.read("PageProducts.xml", testDataSetName, "currency", category);

		boolean standardAvailability = TextUtilities.compareValue(
				TestData.read("PageProducts.xml", testDataSetName, "standardAvailability", category), "true", true, TextComparators.equals);

		this.clickAddProduct();
		this.selectAddDescription(description);
		this.clickAddDescription();

		this.setDescription(englishDescription);
		this.setProductCode(productCode);
		this.checkStandardAvailability(standardAvailability);
		this.selectPricingModel(pricingModel);
		this.setRate(rate);
		this.selectCurrency(currency);
		this.clickSaveChanges();
		return englishDescription;

	}

	public String editCategory(String testDataSetName, String category) throws Exception {
		String productCategoryName = TestData.read("PageProducts.xml", testDataSetName, "productCategoryName", category);

		this.clickRecentCreatedcategory();
		this.clickEdit();
		this.setCategoryName(productCategoryName);
		this.clickSaveCategory();
		return productCategoryName;

	}

	public ProductsPage assetExists(String testDataSetName, String category) throws Exception {
		String productCategory = TestData.read("PageProducts.xml", testDataSetName, "productCategory", category);
		String productName = TestData.read("PageProducts.xml", testDataSetName, "productName", category);
		String assetName = TestData.read("PageProducts.xml", testDataSetName, "assetName", category);

		this.selectProductCategory(productCategory);
		this.selectProduct(productName);
		this.clickShowAssets();
		this.verifyAssetPresent(assetName);
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	public ProductsPage addProductOnDependency(String testDataSetName, String category, String Category) throws Exception {
		String description = TestData.read("PageProducts.xml", testDataSetName, "description", category);
		String englishDescription = TestData.read("PageProducts.xml", testDataSetName, "englishDescription", category);
		String productCode = TestData.read("PageProducts.xml", testDataSetName, "productCode", category);
		String pricingModel = TestData.read("PageProducts.xml", testDataSetName, "pricingModel", category);

		boolean standardAvailability = TextUtilities.compareValue(
				TestData.read("PageProducts.xml", testDataSetName, "standardAvailability", category), "true", true, TextComparators.equals);

		this.addProductCategory();
		this.clickAddProduct();
		this.selectAddDescription(description);
		this.clickAddDescription();

		this.setDescription(englishDescription);
		this.setProductCode(productCode);
		this.checkStandardAvailability(standardAvailability);

		this.selectPricingModel(pricingModel);
		this.clickDependencies();
		this.selectProductCategory(Category);
		this.clickSaveChanges();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	public ProductsPage addProductWithCommission(String testDataSetName, String category) throws Exception {
		String description = TestData.read("PageProducts.xml", testDataSetName, "description", category);
		String englishDescription = TestData.read("PageProducts.xml", testDataSetName, "englishDescription", category);
		String productCode = TestData.read("PageProducts.xml", testDataSetName, "productCode", category);
		String pricingModel = TestData.read("PageProducts.xml", testDataSetName, "pricingModel", category);
		String rate = TestData.read("PageProducts.xml", testDataSetName, "rate", category);
		String agent = TestData.read("PageProducts.xml", testDataSetName, "agent", category);
		String master = TestData.read("PageProducts.xml", testDataSetName, "master", category);

		this.addProductCategory();
		this.clickAddProduct();
		this.selectAddDescription(description);
		this.clickAddDescription();

		this.setDescription(englishDescription);
		this.setProductCode(productCode);
		this.setAgentCommission(agent);
		this.setMasterCommission(master);
		this.selectPricingModel(pricingModel);
		this.setRate(rate);
		this.clickSaveChanges();
		this.verifySavedProduct();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	public ProductsPage deleteProductCategory() throws Exception {
		this.selectSuccessfulProductCategory();
		this.selectSuccessfulProduct();
		this.clickDelete();
		// this.clickConfirmYes();
		return GlobalController.brw.initElements(ProductsPage.class);
	}

	/**
	 * This method will validate users table saved test data
	 *
	 * @throws Exception
	 */
	ProductsPage validateUserTableSavedTestData(String data) throws Exception {
		GlobalController.brw.validateSavedTestData(this.USERS_TABLE_CELL, data);
		return GlobalController.brw.initElements(ProductsPage.class);
	}

	/**
	 * This method will verify breadcrumbs ui component
	 *
	 * @throws Exception
	 */
	public ProductsPage verifyUIComponent() throws Exception {
		GlobalController.brw.verifyUIComponent(this.BREADCRUMBS);
		return GlobalController.brw.initElements(ProductsPage.class);
	}

	public ProductsPage editDependencyInProduct(String testDataSetName, String category, String categoryName, String product,
			String productCategory, String productName, String productCategory2, String productName2) throws Exception {
		String minimum = TestData.read("PageProducts.xml", testDataSetName, "Min1", category);
		String minimum2 = TestData.read("PageProducts.xml", testDataSetName, "Min0", category);

		this.clickSpecifiedCategoryInTheTable(categoryName);
		this.clickSpecifiedProductInTheTable(product);
		GlobalController.brw.waitForWebElementPresent();
		this.ClickEditProduct();

		this.clickDependencies();
		this.selectProductCategory(productCategory);
		this.selectProduct(productName);
		this.setMimimumValue(minimum);
		this.clickImagePlusButton();

		this.selectProductCategory(productCategory2);
		this.selectProduct(productName2);
		this.setMimimumValue(minimum2);
		this.clickImagePlusButton();

		this.clickEditSaveChanges();
		return GlobalController.brw.initElements(ProductsPage.class);

	}

	public boolean isProductPresentInTheDropdownForDependency(String productCategory, String productName) throws Exception {

		this.ClickEditProduct();
		this.clickDependencies();
		this.selectProductCategory(productCategory);
		boolean result = this.isProductPresent(productName);
		this.clickEditSaveChanges();
		return result;

	}

	public String getIDOfAddedProduct() throws Exception {
		this.ClickEditProduct();
		String id = this.getProductID();
		return id;

	}

	/**
	 * This method will validate categories table saved test data
	 *
	 * @throws Exception
	 */
	public ConfigurationPage validateDependencySavedTestData(String data) throws Exception {
		GlobalController.brw.validateSavedTestData(this.ADDED_DEPENDENCY_LIST, data);
		return GlobalController.brw.initElements(ConfigurationPage.class);
	}
}