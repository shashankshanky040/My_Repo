package com.jbilling.framework.pageclasses;

import com.jbilling.framework.globals.GlobalController;
import com.jbilling.framework.globals.Logger;
import com.jbilling.framework.interfaces.ElementField;
import com.jbilling.framework.interfaces.LocateBy;
import com.jbilling.framework.pageclasses.GlobalEnumsPage.AddPlanField;
import com.jbilling.framework.utilities.xmlutils.TestData;

public class PlansPage {
	// Initialize private logger object
	private static Logger logger = new Logger().getLogger(Thread.currentThread().getStackTrace()[1].getClassName());

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//table[@id='plans']/thead/tr/th/a")
	private ElementField PageHeader_Plan;

	@LocateBy(xpath = "//span[text()='Add New']")
	private ElementField LT_AddNew;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//div[@class='download']/a")
	private ElementField LT_DownloadCSVFile;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='product.number']")
	private ElementField PlanDetails_ProductCode;

	@LocateBy(xpath = "//select[@id='plan.periodId']")
	private ElementField Details_Period;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='product.activeSince']")
	private ElementField Details_StartDate;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='product.activeUntil']")
	private ElementField Details_EndDate;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "select[@id='price.currencyId']")
	private ElementField Details_Currency;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//select[@id='product.types']")
	private ElementField Details_Categories;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//label[@id='price.rateAsDecimal']")
	private ElementField Details_Rate;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//select[@id='plan.usagePoolIds']")
	private ElementField Details_FreeUsagePools;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//textarea[@id='plan.description']")
	private ElementField TB_Note;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//span[text()='Add New Metafield']")
	private ElementField LT_AddNewMeta;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='metaField0.name']")
	private ElementField TB_MetaField;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//select[@id='metaField0.dataType']")
	private ElementField Dropdown_MetaFieldDataType;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='metaField0.filename']")
	private ElementField TB_MetaFieldFileName;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='mandatoryCheck']")
	private ElementField CHB_MetaFieldMandatory;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='disableCheck']")
	private ElementField CHB_MetaFieldDisable;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='metaField0.displayOrder']")
	private ElementField TB_MetaFieldDisplayOrder;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='defaultValue0']")
	private ElementField TB_MetaFieldDefaultValue;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//label[text()='Dependency']/preceding-sibling::input")
	private ElementField CHB_MetaFieldDependency;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//label[text()='Help']/preceding-sibling::input")
	private ElementField CHB_MetaFieldHelp;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//select[@id='metaField0.validationRule.ruleType']")
	private ElementField Dropdown_MetaFieldValidation;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//span[text()='Update']")
	private ElementField LT_MetaFieldUpdate;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//span[text()='Remove']")
	private ElementField TB_MetaFieldRemove;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='filterBy']")
	private ElementField Products_FilterBy;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='typeId']")
	private ElementField Products_ProductCategory;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='plansFilterBy']")
	private ElementField Plans_FilterBy;

	@LocateBy(xpath = "//table[@id='plans']/tbody/tr/td/a")
	private ElementField LT_PLANLIST;

	@LocateBy(xpath = "//span[text()='Edit']")
	private ElementField LT_EDIT;

	@LocateBy(xpath = "//input[@id='product.number']")
	private ElementField TB_PRODUCTCODE;

	@LocateBy(xpath = "//select[@id='newDescriptionLanguage']")
	private ElementField DD_ADDDESCRIPTION;

	@LocateBy(xpath = "//a[@onclick='addNewProductDescription()']/img")
	private ElementField IBT_ADDNEWDESCRIPTION;

	@LocateBy(xpath = "//div[@id='descriptions']/div/div/input")
	private ElementField TB_DESCRIPTION;

	@LocateBy(xpath = "//input[@id='product.activeSince']/../img")
	private ElementField BT_STARTDATE;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//input[@id='product.activeUntil']")
	private ElementField BT_ENDDATE;

	@LocateBy(xpath = "//input[@id='price.rateAsDecimal']")
	private ElementField TB_RATE;

	@LocateBy(xpath = "//a[text()='Products']")
	private ElementField LT_PRODUCTS;

	@LocateBy(xpath = "//table[@id='products']/tbody//td/a/strong")
	private ElementField LT_PRODUCTCODE;

	@LocateBy(xpath = "//select[@id='product.types']")
	private ElementField DD_CATEGORY;

	@LocateBy(xpath = "//input[@id='bundle.quantityAsDecimal']")
	private ElementField TB_BUNDLEQUANTITY;

	@LocateBy(xpath = "//label[text()='Rate']/../div/input")
	private ElementField TB_RATEPRODUCT;

	@LocateBy(xpath = "//span[text()='Update']")
	private ElementField LT_UPDATE;

	@LocateBy(xpath = "//span[text()='Save Changes']")
	private ElementField LT_SAVECHANGES;

	@LocateBy(xpath = "//select[@id = 'model.0.type']")
	private ElementField DD_PRICING;

	@LocateBy(xpath = "//select[@id = 'company-select']")
	private ElementField DD_COMPANY;

	@LocateBy(xpath = "//ul[@class = 'top-nav']/li")
	private ElementField CURRENT_COMPANY;

	@LocateBy(xpath = "//input[@id='model.0.rateAsDecimal']")
	private ElementField TB_RATE2;

	@LocateBy(xpath = "//span[text()='Add New']")
	private ElementField LT_ADDNEW;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//div[@id='addDescription']//div/a/img")
	private ElementField IBT5_ADDDESCRIPTION;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//div[@id='descriptions']/div/div/input[1]")
	private ElementField TB_ADDDESCRIPTION;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//label[text()='Availability Start Date']/../div/img")
	private ElementField IBT_STARTDATE;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//label[text()='Availability End Date']/../div/img")
	private ElementField IBT_ENDDATE;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//select[@id='product.types']//option[contains(text(),'New Test category')]")
	private ElementField TXT_CATEGORIES;

	@SuppressWarnings("unused")
	@LocateBy(xpath = "//a[text()='Products']")
	private ElementField LT_PRODUCTSTAB;

	@LocateBy(xpath = "//select[@id='bundle.periodId']")
	private ElementField DD_BUNDELEDPERIOD;

	public PlansPage clickAddNewButton() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_AddNew);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will select first plan in Plans list
	 * 
	 * @throws Exception
	 */
	public PlansPage selectFirstPlanInPlanList() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_PLANLIST);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will click on Edit button
	 * 
	 * @throws Exception
	 */
	public PlansPage clickEdit() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_EDIT);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	public PlansPage addPlan() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_ADDNEW);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will set Product Code
	 * 
	 * @param productCode
	 * @throws Exception
	 */
	public PlansPage setProductCode(String productCode) throws Exception {
		GlobalController.brw.setText(this.TB_PRODUCTCODE, productCode);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will select Add description dropdown option
	 * 
	 * @param description
	 * @throws Exception
	 */
	public PlansPage selectAddDesctiption(String description) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_ADDDESCRIPTION, description);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will click on Add new description + image button
	 * 
	 * @throws Exception
	 */
	public PlansPage clickAddNewDescription() throws Exception {
		GlobalController.brw.click(this.IBT_ADDNEWDESCRIPTION);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will set new English Description
	 * 
	 * @param englishDescription
	 * @throws Exception
	 */
	public PlansPage setNewDescription(String englishDescription) throws Exception {
		GlobalController.brw.setText(this.TB_DESCRIPTION, englishDescription);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will select current date
	 * 
	 * @throws Exception
	 */
	public PlansPage setCurrentDate() throws Exception {
		GlobalController.brw.click(this.BT_STARTDATE);
		GlobalController.brw.pressEnter(this.BT_STARTDATE);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will select current date
	 * 
	 * @throws Exception
	 */
	public PlansPage setEndtDate() throws Exception {
		// GlobalController.brw.click(this.BT_STARTDATE);
		// GlobalController.brw.pressEnter(this.BT_STARTDATE);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will set Rate
	 * 
	 * @param rate
	 * @throws Exception
	 */
	public PlansPage setRate(String rate) throws Exception {
		GlobalController.brw.setText(this.TB_RATE, rate);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will set Model Rate
	 * 
	 * @param rate
	 * @throws Exception
	 */
	public PlansPage setModelRate(String rate) throws Exception {
		GlobalController.brw.setText(this.TB_RATE2, rate);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will select Category from dropdown
	 * 
	 * @param category
	 * @throws Exception
	 */
	public PlansPage selectCategory(String category) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_CATEGORY, category);
		Thread.sleep(3000);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will select Products tab within plans
	 * 
	 * @throws Exception
	 */
	public PlansPage selectInsideProductsTab() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_PRODUCTS);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will select product code1 description code
	 * 
	 * @throws Exception
	 */
	public PlansPage selectProductCode(String product) throws Exception {
		GlobalController.brw.selectListItem(this.LT_PRODUCTCODE, product);
		return GlobalController.brw.initElements(PlansPage.class);
	}

	/**
	 * This method will set bundled quantity
	 * 
	 * @param quantity
	 * @throws Exception
	 */
	public PlansPage setBundleQuantity(String quantity) throws Exception {
		GlobalController.brw.waitForWebElementPresent();
		GlobalController.brw.setText(this.TB_BUNDLEQUANTITY, quantity);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method set product rate
	 * 
	 * @param rate
	 * @throws Exception
	 */
	public PlansPage setRateProduct(String rate) throws Exception {
		GlobalController.brw.setText(this.TB_RATEPRODUCT, rate);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will click Update button
	 * 
	 * @throws Exception
	 */
	public PlansPage clickUpdate() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_UPDATE);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will click save changes button
	 * 
	 * @throws Exception
	 */
	public PlansPage clickSaveChanges() throws Exception {
		GlobalController.brw.clickLinkText(this.LT_SAVECHANGES);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	public PlansPage selectPricicngDropdown(String pricing) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_PRICING, pricing);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will select current company
	 * 
	 * @throws Exception
	 */
	public PlansPage selectCurrentCompany() throws Exception {
		String currentCompany = GlobalController.brw.getText(this.CURRENT_COMPANY);
		GlobalController.brw.selectDropDown(this.DD_COMPANY, currentCompany);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will select Bundled Period dropdown option
	 * 
	 * @param description
	 * @throws Exception
	 */
	public PlansPage selectBundeledPeriod(String period) throws Exception {
		GlobalController.brw.selectDropDown(this.DD_BUNDELEDPERIOD, period);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	/**
	 * This method will select Plan Period dropdown option
	 * 
	 * @param description
	 * @throws Exception
	 */
	public PlansPage selectPlanPeriod(String period) throws Exception {
		GlobalController.brw.selectDropDown(this.Details_Period, period);
		return GlobalController.brw.initElements(PlansPage.class);

	}

	public PlansPage addPlan(AddPlanField addPlanField, String userCategory, String productCategory, String testDataSetName, String category)
			throws Exception {
		PlansPage.logger.enterMethod();

		String productCode = TestData.read("PagePlans.xml", testDataSetName, "productCode", category);
		String description = TestData.read("PagePlans.xml", testDataSetName, "description", category);
		String englishDescription = TestData.read("PagePlans.xml", testDataSetName, "englishDescription", category);
		String rate = TestData.read("PagePlans.xml", testDataSetName, "rate", category);
		String bundleQuantity = TestData.read("PagePlans.xml", testDataSetName, "bundleQuantity", category);
		String rateProduct = TestData.read("PagePlans.xml", testDataSetName, "rateProduct", category);
		String pricing = TestData.read("PagePlans.xml", testDataSetName, "pricing", category);
		String bundledPeriod = TestData.read("PagePlans.xml", testDataSetName, "bundledPeriod", category);

		switch (addPlanField) {
		case ALL:
			this.clickAddNewButton();
			this.setProductCode(productCode);
			this.selectAddDesctiption(description);
			this.clickAddNewDescription();
			this.setNewDescription(englishDescription);
			this.setRate(rate);
			this.selectCategory(userCategory);
			this.selectCurrentCompany();
			this.selectInsideProductsTab();
			this.selectProductCode(productCategory);
			// this.selectPricicngDropdown(pricing);
			this.setBundleQuantity(bundleQuantity);
			this.setModelRate(rateProduct);
			this.clickUpdate();
			break;
		case PRODUCT:
			this.clickAddNewButton();
			this.setProductCode(productCode);
			this.selectAddDesctiption(description);
			this.clickAddNewDescription();
			this.setNewDescription(englishDescription);
			this.setRate(rate);
			this.selectCategory(userCategory);
			this.selectCurrentCompany();
			this.selectInsideProductsTab();
			this.selectProductCode(productCategory);
			this.setBundleQuantity(bundleQuantity);
			this.clickUpdate();
			break;
		case BUNDLEDPERIOD:
			this.clickAddNewButton();
			this.setProductCode(productCode);
			this.selectAddDesctiption(description);
			this.clickAddNewDescription();
			this.setNewDescription(englishDescription);
			this.setRate(rate);
			this.selectCategory(userCategory);
			this.selectCurrentCompany();
			this.selectInsideProductsTab();
			this.selectProductCode(productCategory);
			// this.selectPricicngDropdown(pricing);
			this.setBundleQuantity(bundleQuantity);
			this.selectBundeledPeriod(bundledPeriod);
			this.setModelRate(rateProduct);
			this.clickUpdate();
			break;

		default:
			throw new Exception("Invalid Step Provided. Not defined in enumeration");
		}

		this.clickSaveChanges();

		PlansPage.logger.exitMethod();
		return GlobalController.brw.initElements(PlansPage.class);
	}

	public PlansPage addPlan(String userCategory, String productCategory, String testDataSetName, String category) throws Exception {
		PlansPage.logger.enterMethod();

		String productCode = TestData.read("PagePlans.xml", testDataSetName, "productCode", category);
		String description = TestData.read("PagePlans.xml", testDataSetName, "description", category);
		String englishDescription = TestData.read("PagePlans.xml", testDataSetName, "englishDescription", category);
		String rate = TestData.read("PagePlans.xml", testDataSetName, "rate", category);
		String bundleQuantity = TestData.read("PagePlans.xml", testDataSetName, "bundleQuantity", category);
		String rateProduct = TestData.read("PagePlans.xml", testDataSetName, "rateProduct", category);
		String pricing = TestData.read("PagePlans.xml", testDataSetName, "pricing", category);

		this.clickAddNewButton();
		this.setProductCode(productCode);
		this.selectAddDesctiption(description);
		this.clickAddNewDescription();
		this.setNewDescription(englishDescription);
		this.selectCategory(userCategory);
		this.setRate(rate);
		this.selectCurrentCompany();
		this.selectInsideProductsTab();
		this.selectProductCode(productCategory);
		this.selectProductCode(productCategory);
		// this.selectPricicngDropdown(pricing);
		this.setBundleQuantity(bundleQuantity);
		this.setModelRate(rateProduct);
		this.clickUpdate();
		this.clickSaveChanges();

		PlansPage.logger.exitMethod();
		return GlobalController.brw.initElements(PlansPage.class);
	}

	public PlansPage editPlan(String productCategory, String testDataSetName, String category) throws Exception {
		String pricing = TestData.read("PagePlans.xml", testDataSetName, "pricing", category);
		String bundleQuantity = TestData.read("PagePlans.xml", testDataSetName, "bundleQuantity", category);
		String rateProduct = TestData.read("PagePlans.xml", testDataSetName, "rateProduct", category);
		this.selectFirstPlanInPlanList();
		this.clickEdit();
		this.selectInsideProductsTab();
		this.selectProductCode(productCategory);
		// this.selectPricicngDropdown(pricing);
		this.setBundleQuantity(bundleQuantity);
		this.setModelRate(rateProduct);
		this.clickUpdate();
		this.clickSaveChanges();
		return GlobalController.brw.initElements(PlansPage.class);
	}

	public PlansPage addPlan(AddPlanField addPlanField, String userCategory, String productCategory, String planPeriod,
			String testDataSetName, String category) throws Exception {
		PlansPage.logger.enterMethod();

		String productCode = TestData.read("PagePlans.xml", testDataSetName, "productCode", category);
		String description = TestData.read("PagePlans.xml", testDataSetName, "description", category);
		String englishDescription = TestData.read("PagePlans.xml", testDataSetName, "englishDescription", category);
		String rate = TestData.read("PagePlans.xml", testDataSetName, "rate", category);
		String bundleQuantity = TestData.read("PagePlans.xml", testDataSetName, "bundleQuantity", category);
		String rateProduct = TestData.read("PagePlans.xml", testDataSetName, "rateProduct", category);
		String pricing = TestData.read("PagePlans.xml", testDataSetName, "pricing", category);
		String bundledPeriod = TestData.read("PagePlans.xml", testDataSetName, "bundledPeriod", category);
		String bundleQuantity2 = TestData.read("PagePlans.xml", testDataSetName, "bundleQuantity2", category);
		String rateProduct2 = TestData.read("PagePlans.xml", testDataSetName, "rateProduct2", category);
		switch (addPlanField) {

		case PLANPERIOD:
			this.clickAddNewButton();
			this.setProductCode(productCode);
			this.selectAddDesctiption(description);
			this.clickAddNewDescription();
			this.setNewDescription(englishDescription);
			this.selectPlanPeriod(planPeriod);
			this.setRate(rate);
			this.selectCategory(userCategory);
			this.selectCurrentCompany();
			this.selectInsideProductsTab();
			this.selectProductCode(productCategory);
			this.setBundleQuantity(bundleQuantity);
			this.setModelRate(rateProduct);
			this.clickUpdate();
			this.clickSaveChanges();
			break;
		case MULTIPLEPLAN:
			this.clickAddNewButton();
			this.setProductCode(productCode);
			this.selectAddDesctiption(description);
			this.clickAddNewDescription();
			this.setNewDescription(englishDescription);
			this.selectPlanPeriod(planPeriod);
			this.setRate(rate);
			this.selectCategory(userCategory);
			this.selectCurrentCompany();
			this.selectInsideProductsTab();
			this.selectProductCode(productCategory);
			this.setBundleQuantity(bundleQuantity);
			this.setModelRate(rateProduct);
			this.clickUpdate();
			this.selectInsideProductsTab();
			this.selectProductCode(productCategory);
			this.setBundleQuantity(bundleQuantity2);
			this.setModelRate(rateProduct2);
			this.clickUpdate();
			this.clickSaveChanges();
			break;
		default:
			throw new Exception("Invalid Step Provided. Not defined in enumeration");
		}

		PlansPage.logger.exitMethod();
		return GlobalController.brw.initElements(PlansPage.class);
	}

}
